#!/bin/bash
set -e
source ${OWNCLOUD_RUNTIME_DIR}/env-defaults

OWNCLOUD_TEMPLATES_DIR=${OWNCLOUD_RUNTIME_DIR}/config
OWNCLOUD_CONFIG_PHP=${OWNCLOUD_CONFIG_DIR}/config.php
OWNCLOUD_AUTOCONFIG_PHP=${OWNCLOUD_INSTALL_DIR}/config/autoconfig.php

# Compares two version strings `a` and `b`
# Returns
#   - negative integer, if `a` is less than `b`
#   - 0, if `a` and `b` are equal
#   - non-negative integer, if `a` is greater than `b`
vercmp() {
  expr '(' "$1" : '\([^.]*\)' ')' '-' '(' "$2" : '\([^.]*\)' ')' '|' \
       '(' "$1.0" : '[^.]*[.]\([^.]*\)' ')' '-' '(' "$2.0" : '[^.]*[.]\([^.]*\)' ')' '|' \
       '(' "$1.0.0" : '[^.]*[.][^.]*[.]\([^.]*\)' ')' '-' '(' "$2.0.0" : '[^.]*[.][^.]*[.]\([^.]*\)' ')' '|' \
       '(' "$1.0.0.0" : '[^.]*[.][^.]*[.][^.]*[.]\([^.]*\)' ')' '-' '(' "$2.0.0.0" : '[^.]*[.][^.]*[.][^.]*[.]\([^.]*\)' ')'
}

## Execute a command as OWNCLOUD_USER
exec_as_owncloud() {
  if [[ $(whoami) == ${OWNCLOUD_USER} ]]; then
    $@
  else
    sudo -HEu ${OWNCLOUD_USER} "$@"
  fi
}

occ() {
  exec_as_owncloud php occ $@
}

## Copies configuration template in ${OWNCLOUD_TEMPLATES_DIR} to the destination as the specified USER
# $1: copy-as user
# $2: source file
# $3: destination location
# $4: mode of destination
install_template() {
  local USR=${1}
  local SRC=${2}
  local DEST=${3}
  local MODE=${4:-0644}
  if [[ -f ${OWNCLOUD_TEMPLATES_DIR}/${SRC} ]]; then
    sudo -HEu ${USR} cp ${OWNCLOUD_TEMPLATES_DIR}/${SRC} ${DEST}
  fi
  chmod ${MODE} ${DEST}
}

## Replace placeholders with values
# $1: file with placeholders to replace
# $x: placeholders to replace
update_template() {
  local FILE=${1?missing argument}
  shift

  [[ ! -f ${FILE} ]] && return 1

  local VARIABLES=($@)
  local USR=$(stat -c %U ${FILE})
  local tmp_file=$(mktemp)
  cp -a "${FILE}" ${tmp_file}

  local variable
  for variable in ${VARIABLES[@]}; do
    # Keep the compatibilty: {{VAR}} => ${VAR}
    sed -ri "s/[{]{2}$variable[}]{2}/\${$variable}/g" ${tmp_file}
  done

  # Replace placeholders
  (
    export ${VARIABLES[@]}
    local IFS=":"; sudo -HEu ${USR} envsubst "${VARIABLES[*]/#/$}" < ${tmp_file} > ${FILE}
  )
  rm -f ${tmp_file}
}

owncloud_get_param() {
  local key=${1?missing argument}
  exec_as_owncloud sed -n -e "s/\([ ]*\)\('${key}' => '\)\([^ ']*\)\(.*\)$/\3/p" ${OWNCLOUD_CONFIG_PHP}
}

owncloud_set_param() {
  local key=${1?missing argument}
  local value=${2?missing argument}
  local hide=${3}
  if [[ -n ${value} ]]; then
    local current=$(owncloud_get_param ${key})
    if [[ "${current}" != "${value}" ]]; then
      case ${hide} in
        true)  echo "‣ Setting config.php parameter: ${key}" ;;
        *) echo "‣ Setting config.php parameter: ${key} = '${value}'" ;;
      esac
      value="$(echo "${value}" | sed 's|[&]|\\&|g')"
      exec_as_owncloud sed -i "s|'${key}' => .*|'${key}' => '${value}',|" ${OWNCLOUD_CONFIG_PHP}
    fi
  fi
}

owncloud_finalize_database_parameters() {
  # is a mysql or postgresql database linked?
  # requires that the mysql or postgresql containers have exposed
  # port 3306 and 5432 respectively.
  if [[ -n ${MYSQL_PORT_3306_TCP_ADDR} ]]; then
    DB_TYPE=${DB_TYPE:-mysql}
    DB_HOST=${DB_HOST:-mysql}
    DB_PORT=${DB_PORT:-$MYSQL_PORT_3306_TCP_PORT}

    # support for linked sameersbn/mysql image
    DB_USER=${DB_USER:-$MYSQL_ENV_DB_USER}
    DB_PASS=${DB_PASS:-$MYSQL_ENV_DB_PASS}
    DB_NAME=${DB_NAME:-$MYSQL_ENV_DB_NAME}

    # support for linked orchardup/mysql and enturylink/mysql image
    # also supports official mysql image
    DB_USER=${DB_USER:-$MYSQL_ENV_MYSQL_USER}
    DB_PASS=${DB_PASS:-$MYSQL_ENV_MYSQL_PASSWORD}
    DB_NAME=${DB_NAME:-$MYSQL_ENV_MYSQL_DATABASE}
  elif [[ -n ${POSTGRESQL_PORT_5432_TCP_ADDR} ]]; then
    DB_TYPE=${DB_TYPE:-pgsql}
    DB_HOST=${DB_HOST:-postgresql}
    DB_PORT=${DB_PORT:-$POSTGRESQL_PORT_5432_TCP_PORT}

    # support for linked official postgres image
    DB_USER=${DB_USER:-$POSTGRESQL_ENV_POSTGRES_USER}
    DB_PASS=${DB_PASS:-$POSTGRESQL_ENV_POSTGRES_PASSWORD}
    DB_NAME=${DB_NAME:-$DB_USER}

    # support for linked sameersbn/postgresql image
    DB_USER=${DB_USER:-$POSTGRESQL_ENV_DB_USER}
    DB_PASS=${DB_PASS:-$POSTGRESQL_ENV_DB_PASS}
    DB_NAME=${DB_NAME:-$POSTGRESQL_ENV_DB_NAME}

    # support for linked orchardup/postgresql image
    DB_USER=${DB_USER:-$POSTGRESQL_ENV_POSTGRESQL_USER}
    DB_PASS=${DB_PASS:-$POSTGRESQL_ENV_POSTGRESQL_PASS}
    DB_NAME=${DB_NAME:-$POSTGRESQL_ENV_POSTGRESQL_DB}

    # support for linked paintedfox/postgresql image
    DB_USER=${DB_USER:-$POSTGRESQL_ENV_USER}
    DB_PASS=${DB_PASS:-$POSTGRESQL_ENV_PASS}
    DB_NAME=${DB_NAME:-$POSTGRESQL_ENV_DB}
  fi

  if [[ -z ${DB_HOST} ]]; then
    echo
    echo "ERROR: "
    echo "  Please configure the database connection."
    echo "  Cannot continue without a database. Aborting..."
    echo
    return 1
  fi

  # use default port number if it is still not set
  case ${DB_TYPE} in
    mysql) DB_PORT=${DB_PORT:-3306} ;;
    pgsql) DB_PORT=${DB_PORT:-5432} ;;
    *)
      echo
      echo "ERROR: "
      echo "  Please specify the database type in use via the DB_TYPE configuration option."
      echo "  Accepted values are \"pgsql\" or \"mysql\". Aborting..."
      echo
      return 1
      ;;
  esac

  # set default user and database
  DB_USER=${DB_USER:-root}
  DB_NAME=${DB_NAME:-ownclouddb}
}

owncloud_check_database_connection() {
  case ${DB_TYPE} in
    mysql)
      prog="mysqladmin -h ${DB_HOST} -P ${DB_PORT} -u ${DB_USER} ${DB_PASS:+-p$DB_PASS} status"
      ;;
    pgsql)
      prog=$(find /usr/lib/postgresql/ -name pg_isready)
      prog="${prog} -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d ${DB_NAME} -t 1"
      ;;
  esac
  timeout=60
  while ! ${prog} >/dev/null 2>&1
  do
    timeout=$(expr $timeout - 1)
    if [[ $timeout -eq 0 ]]; then
      echo
      echo "Could not connect to database server. Aborting..."
      return 1
    fi
    echo -n "."
    sleep 1
  done
  echo
}

owncloud_configure_database() {
  echo -n "Configuring ownCloud::database"

  owncloud_finalize_database_parameters
  owncloud_check_database_connection

  if [[ ! -f ${OWNCLOUD_CONFIG_PHP} ]]; then
    update_template ${OWNCLOUD_AUTOCONFIG_PHP} \
      DB_TYPE \
      DB_HOST \
      DB_PORT \
      DB_NAME \
      DB_USER \
      DB_PASS \
      OWNCLOUD_ADMIN_USER \
      OWNCLOUD_ADMIN_PASSWORD
  else
    owncloud_set_param dbtype ${DB_TYPE}
    owncloud_set_param dbhost ${DB_HOST}:${DB_PORT}
    owncloud_set_param dbname ${DB_NAME}
    owncloud_set_param dbuser ${DB_USER}
    owncloud_set_param dbpassword ${DB_PASS} true
  fi
}

owncloud_upgrade() {
  CACHE_VERSION=
  [[ -f ${OWNCLOUD_CONFIG_DIR}/VERSION ]] && CACHE_VERSION=$(cat ${OWNCLOUD_CONFIG_DIR}/VERSION)
  if [[ ${OWNCLOUD_VERSION} != ${CACHE_VERSION} ]]; then

    ## version check, only upgrades are allowed
    if [[ -n ${CACHE_VERSION} && $(vercmp ${OWNCLOUD_VERSION} ${CACHE_VERSION}) -lt 0 ]]; then
      echo
      echo "ERROR: "
      echo "  Cannot downgrade from ownCloud version ${CACHE_VERSION} to ${OWNCLOUD_VERSION}."
      echo "  Only upgrades are allowed. Please use sameersbn/owncloud:${CACHE_VERSION} or higher."
      echo "  Cannot continue. Aborting!"
      echo
      return 1
    fi

    # upgrade can only be performed after the firstrun.
    # we count the number of tables in the database if its the firstrun.
    case ${DB_TYPE} in
      mysql)
        QUERY="SELECT count(*) FROM information_schema.tables WHERE table_schema = '${DB_NAME}';"
        COUNT=$(mysql -h ${DB_HOST} -P ${DB_PORT} -u ${DB_USER} ${DB_PASS:+-p$DB_PASS} -ss -e "${QUERY}")
        ;;
      pgsql)
        QUERY="SELECT count(*) FROM information_schema.tables WHERE table_schema = 'public';"
        COUNT=$(PGPASSWORD="${DB_PASS}" psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d ${DB_NAME} -Atw -c "${QUERY}")
        ;;
    esac
    if [[ ${COUNT} -gt 0 ]]; then
      echo "Upgrading ownCloud..."
      occ maintenance:mode --on
      occ upgrade
      occ maintenance:mode --off
    fi
    echo -n "${OWNCLOUD_VERSION}" | exec_as_owncloud tee ${OWNCLOUD_CONFIG_DIR}/VERSION >/dev/null
  fi
}

owncloud_configure_domain() {
  echo "Configuring ownCloud::trusted_domain..."
  if [[ -f ${OWNCLOUD_CONFIG_PHP} ]]; then
    owncloud_set_param overwrite.cli.url ${OWNCLOUD_URL}
    sed -i "s|0 => '.*',|0 => '${OWNCLOUD_FQDN}',|" ${OWNCLOUD_CONFIG_PHP}
  fi
}

owncloud_configure_max_upload_size() {
  echo "Configuring ownCloud::max_upload_size..."
  (
    echo "upload_max_filesize=${OWNCLOUD_UPLOAD_MAX_FILESIZE}"
    echo "post_max_size=${OWNCLOUD_UPLOAD_MAX_FILESIZE}"
  ) >> ${OWNCLOUD_INSTALL_DIR}/.user.ini
}

owncloud_configure_max_file_uploads() {
  echo "Configuring ownCloud::max_file_uploads..."
  echo "max_file_uploads=${OWNCLOUD_MAX_FILE_UPLOADS}" >> ${OWNCLOUD_INSTALL_DIR}/.user.ini
}

nginx_configure_virtualhost() {
  echo "Configuring ownCloud virtualhost..."
  update_template /etc/nginx/sites-enabled/${OWNCLOUD_FQDN}.conf OWNCLOUD_FQDN
}

backup_dump_database() {
  owncloud_finalize_database_parameters
  case ${DB_TYPE} in
    pgsql)
      echo -n "Dumping PostgreSQL database ${DB_NAME}"
      owncloud_check_database_connection
      exec_as_owncloud PGPASSWORD=${DB_PASS} pg_dump --clean \
        --host ${DB_HOST} --port ${DB_PORT} \
        --username ${DB_USER} ${DB_NAME} | \
          gzip > ${OWNCLOUD_BACKUPS_DIR}/database.sql.gz
      ;;
    mysql)
      echo -n "Dumping MySQL database ${DB_NAME}"
      owncloud_check_database_connection
      exec_as_owncloud MYSQL_PWD=${DB_PASS} mysqldump --lock-tables --add-drop-table \
        --host ${DB_HOST} --port ${DB_PORT} \
        --user ${DB_USER} ${DB_NAME} | \
          gzip > ${OWNCLOUD_BACKUPS_DIR}/database.sql.gz
      ;;
  esac
  chown ${OWNCLOUD_USER}:${OWNCLOUD_USER} ${OWNCLOUD_BACKUPS_DIR}/database.sql.gz
}

backup_dump_directory() {
  local directory=${1}
  local dirname=$(basename ${directory})

  echo "Dumping ${dirname}..."
  exec_as_owncloud tar -jcf ${OWNCLOUD_BACKUPS_DIR}/${dirname}.tar.gz -C ${directory} .
}

backup_dump_information() {
  (
    echo "info:"
    echo "  owncloud_version: ${OWNCLOUD_VERSION}"
    echo "  database_adapter: $(owncloud_get_param dbtype)"
    echo "  created_at: $(date)"
  ) > ${OWNCLOUD_BACKUPS_DIR}/backup_information.yml
  chown ${OWNCLOUD_USER}:${OWNCLOUD_USER} ${OWNCLOUD_BACKUPS_DIR}/backup_information.yml
}

backup_create_archive() {
  local tar_file="$(date +%s)_owncloud_backup.tar"

  echo "Creating backup archive: ${tar_file}..."
  exec_as_owncloud tar -cf ${OWNCLOUD_BACKUPS_DIR}/${tar_file} -C ${OWNCLOUD_BACKUPS_DIR} $@

  for f in $@
  do
    exec_as_owncloud rm -rf ${OWNCLOUD_BACKUPS_DIR}/${f}
  done
}

install_configuration_templates() {
  echo "Installing configuration templates..."
  # on firstrun, install autoconfig.php
  if [[ ! -f ${OWNCLOUD_CONFIG_PHP} ]]; then
    install_template ${OWNCLOUD_USER} owncloud/autoconfig.php ${OWNCLOUD_AUTOCONFIG_PHP} 0644
    update_template ${OWNCLOUD_AUTOCONFIG_PHP} OWNCLOUD_OCDATA_DIR
  fi

  if [[ -d /etc/nginx/sites-enabled && ! -f /etc/nginx/sites-enabled/${OWNCLOUD_FQDN}.conf ]]; then
    install_template root nginx/ownCloud.conf /etc/nginx/sites-enabled/${OWNCLOUD_FQDN}.conf 0644
    update_template /etc/nginx/sites-enabled/${OWNCLOUD_FQDN}.conf OWNCLOUD_INSTALL_DIR
  fi
}

initialize_datadir() {
  echo "Initializing datadir..."
  chmod 0755 ${OWNCLOUD_DATA_DIR}
  chown ${OWNCLOUD_USER}:${OWNCLOUD_USER} ${OWNCLOUD_DATA_DIR}

  # create ocdata directory
  mkdir -p ${OWNCLOUD_OCDATA_DIR}
  chown -R ${OWNCLOUD_USER}:${OWNCLOUD_USER} ${OWNCLOUD_OCDATA_DIR}
  chmod -R 0750 ${OWNCLOUD_OCDATA_DIR}

  # create config directory
  mkdir -p ${OWNCLOUD_CONFIG_DIR}
  chown -R ${OWNCLOUD_USER}:${OWNCLOUD_USER} ${OWNCLOUD_CONFIG_DIR}
  chmod -R 0750 ${OWNCLOUD_CONFIG_DIR}

  # create backups directory
  mkdir -p ${OWNCLOUD_BACKUPS_DIR}
  chmod -R 0755 ${OWNCLOUD_BACKUPS_DIR}
  chown -R ${OWNCLOUD_USER}:${OWNCLOUD_USER} ${OWNCLOUD_BACKUPS_DIR}

  # symlink to config/config.php -> ${OWNCLOUD_CONFIG_DIR}/config.php
  ln -sf ${OWNCLOUD_CONFIG_DIR}/config.php ${OWNCLOUD_INSTALL_DIR}/config/config.php
}

initialize_system() {
  initialize_datadir
  install_configuration_templates
}

configure_owncloud() {
  echo "Configuring ownCloud..."
  owncloud_configure_database
  owncloud_upgrade
  owncloud_configure_domain
  owncloud_configure_max_upload_size
  owncloud_configure_max_file_uploads
}

configure_nginx() {
  echo "Configuring nginx..."
  nginx_configure_virtualhost
}

backup_create() {
  backup_dump_database
  backup_dump_directory ${OWNCLOUD_CONFIG_DIR}
  backup_dump_directory ${OWNCLOUD_OCDATA_DIR}
  backup_dump_information
  backup_create_archive backup_information.yml database.sql.gz config.tar.gz ocdata.tar.gz
}
